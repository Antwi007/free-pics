{"ast":null,"code":"var _jsxFileName = \"/Users/keremguventurk/Documents/GitHub/free-pics/src/components/Modal.js\";\n//Modal.js\nimport React, { useRef } from \"react\";\nimport ReactDom from \"react-dom\";\nexport const Modal = ({\n  setShowModal\n}) => {\n  // close the modal when clicking outside the modal.\n  const modalRef = useRef();\n\n  const closeModal = e => {\n    if (e.target === modalRef.current) {\n      setShowModal(false);\n    }\n  }; //render the modal JSX in the portal div.\n\n\n  return ReactDom.createPortal( /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    ref: modalRef,\n    onClick: closeModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 17\n    }\n  }, \"This is a Modal\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setShowModal(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 17\n    }\n  }, \"X\"))), document.getElementById(\"portal\"));\n};","map":{"version":3,"sources":["/Users/keremguventurk/Documents/GitHub/free-pics/src/components/Modal.js"],"names":["React","useRef","ReactDom","Modal","setShowModal","modalRef","closeModal","e","target","current","createPortal","document","getElementById"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA,OAAO,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAsB;AACvC;AACA,QAAMC,QAAQ,GAAGJ,MAAM,EAAvB;;AACA,QAAMK,UAAU,GAAIC,CAAD,IAAO;AACtB,QAAIA,CAAC,CAACC,MAAF,KAAaH,QAAQ,CAACI,OAA1B,EAAmC;AAC/BL,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;AACJ,GAJD,CAHuC,CAQvC;;;AACA,SAAOF,QAAQ,CAACQ,YAAT,eACH;AAAK,IAAA,SAAS,EAAC,WAAf;AAA2B,IAAA,GAAG,EAAEL,QAAhC;AAA0C,IAAA,OAAO,EAAEC,UAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,eAEI;AAAQ,IAAA,OAAO,EAAE,MAAMF,YAAY,CAAC,KAAD,CAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFJ,CADJ,CADG,EAOHO,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAPG,CAAP;AASH,CAlBM","sourcesContent":["//Modal.js\nimport React, { useRef } from \"react\";\nimport ReactDom from \"react-dom\";\n\nexport const Modal = ({ setShowModal }) => {\n    // close the modal when clicking outside the modal.\n    const modalRef = useRef();\n    const closeModal = (e) => {\n        if (e.target === modalRef.current) {\n            setShowModal(false);\n        }\n    };\n    //render the modal JSX in the portal div.\n    return ReactDom.createPortal(\n        <div className=\"container\" ref={modalRef} onClick={closeModal}>\n            <div className=\"modal\">\n                <h2>This is a Modal</h2>\n                <button onClick={() => setShowModal(false)}>X</button>\n            </div>\n        </div>,\n        document.getElementById(\"portal\")\n    );\n};"]},"metadata":{},"sourceType":"module"}